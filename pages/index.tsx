import { Grid, Text } from '@nextui-org/react';
import type { api_log, fresh_post } from '@prisma/client';
import { CustomLoading } from 'components/CustomLoading';
import { usePagination } from 'hook/usePagination';
import { _axios } from 'lib/axiosInstance';
import type { GetFreshPostReturn } from 'lib/crawl/logic/post';
import { names } from 'lib/crawl/targetInfo';
import { getRecentAccessLog } from 'lib/log';
import { GetServerSidePropsContext } from 'next';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { getSelectorsByUserAgent } from 'react-device-detect';
import useSWR from 'swr';

type Props = {
	isMobile: boolean;
	recentAccessLog: api_log;
};
const MobileContainer = dynamic(() => import('containers/MobileContainer'), {});
const DesktopContainer = dynamic(() => import('containers/DesktopContainer'), {});

console.log('mode:', process.env.NEXT_PUBLIC_MODE);

const Home = ({ isMobile, recentAccessLog }: Props) => {
	const {
		pageIdx,
		limit,
		actions: { pageIdxHandler },
	} = usePagination({});

	const { data, error, isValidating } = useSWR<GetFreshPostReturn>(
		`/api/crawl/getFreshPost/${pageIdx}`,
		async () =>
			await _axios
				.post(`/api/crawl/getFreshPost`, { orderByHit: 'desc', limit, offset: (pageIdx - 1) * limit })
				.then((res) => res.data)
	);

	const [totalCount, setTotalCount] = useState(0);
	const [freshPostList, setFreshPostList] = useState<fresh_post[]>([]);

	useEffect(() => {
		if (data?.list && data?.list?.length > 0) {
			setFreshPostList(data.list);
		}
	}, [data?.list]);

	useEffect(() => {
		if (data?.totalCount && data?.totalCount > 0 && data?.totalCount !== totalCount) {
			setTotalCount(data.totalCount);
		}
	}, [data?.totalCount, totalCount]);

	return (
		<>
			<div>
				<Head>
					<title>Seize what you want without NO LIMIT.</title>
					<meta name='description' content='Generated by create next app' />
					<link rel='icon' href='/favicon.ico' />
					<meta name='viewport' content='initial-scale=1, width=device-width' />
				</Head>

				<main>
					{isMobile && (
						<MobileContainer
							recentAccessLog={recentAccessLog}
							totalCount={totalCount}
							targetSiteCount={Object.keys(names).length}
							limit={limit}
							pageIdx={pageIdx}
							pageIdxHandler={pageIdxHandler}
							freshPostList={freshPostList}
						/>
					)}
					{!isMobile && (
						<DesktopContainer
							recentAccessLog={recentAccessLog}
							totalCount={totalCount}
							targetSiteCount={Object.keys(names).length}
							limit={limit}
							pageIdx={pageIdx}
							pageIdxHandler={pageIdxHandler}
							freshPostList={freshPostList}
						/>
					)}
				</main>

				<footer>
					<Grid.Container direction='column' justify='center'>
						<Text css={{ textAlign: 'center' }}>Logan will deserve all rights.</Text>
						<Text css={{ textAlign: 'center' }}>ver.0.0.1</Text>
					</Grid.Container>
				</footer>
			</div>
			{isValidating && <CustomLoading />}
		</>
	);
};
export default Home;

export async function getServerSideProps({ req, res }: GetServerSidePropsContext) {
	const userAgent = req.headers['user-agent'] || '';

	const { isMobile } = getSelectorsByUserAgent(userAgent);
	// { isMobile }

	const recentAccessLog = await getRecentAccessLog();

	return {
		props: {
			isMobile,
			recentAccessLog: JSON.parse(JSON.stringify(recentAccessLog)),
		},
	};
}

// {
// 	"isSmartTV": false,
// 	"isConsole": false,
// 	"isWearable": false,
// 	"isEmbedded": false,
// 	"isMobileSafari": false,
// 	"isChromium": false,
// 	"isMobile": false,
// 	"isMobileOnly": false,
// 	"isTablet": false,
// 	"isBrowser": true,
// 	"isDesktop": true,
// 	"isAndroid": false,
// 	"isWinPhone": false,
// 	"isIOS": false,
// 	"isChrome": true,
// 	"isFirefox": false,
// 	"isSafari": false,
// 	"isOpera": false,
// 	"isIE": false,
// 	"osVersion": "10.15.7",
// 	"osName": "Mac OS",
// 	"fullBrowserVersion": "108.0.0.0",
// 	"browserVersion": "108",
// 	"browserName": "Chrome",
// 	"mobileVendor": "none",
// 	"mobileModel": "none",
// 	"engineName": "Blink",
// 	"engineVersion": "108.0.0.0",
// 	"getUA": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36",
// 	"isEdge": false,
// 	"isYandex": false,
// 	"deviceType": "browser",
// 	"isIOS13": false,
// 	"isIPad13": false,
// 	"isIPhone13": false,
// 	"isIPod13": false,
// 	"isElectron": false,
// 	"isEdgeChromium": false,
// 	"isLegacyEdge": false,
// 	"isWindows": false,
// 	"isMacOs": true,
// 	"isMIUI": false,
// 	"isSamsungBrowser": false
// }
