import { Grid, Spacer, Text } from '@nextui-org/react';
import type { fresh_post } from '@prisma/client';
import { BottomPagination } from 'components/BottomPagination';
import { CustomLoading } from 'components/CustomLoading';
import { InfoBar } from 'containers/InfoBar';
import { PostContainer } from 'containers/PostContainer';
import { usePagination } from 'hook/usePagination';
import { _axios } from 'lib/axiosInstance';
import type { GetFreshPostReturn } from 'lib/crawl/logic/post';
import { names } from 'lib/crawl/targetInfo';
import { GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { getSelectorsByUserAgent } from 'react-device-detect';
import useSWR from 'swr';

type Props = {
	// posts: fresh_post[];
	// totalCount: number;
	isMobile: boolean;
};

console.log('mode:', process.env.NEXT_PUBLIC_MODE);

const Home = ({ isMobile }: Props) => {
	const {
		pageIdx,
		limit,
		actions: { pageIdxHandler },
	} = usePagination({});

	const { data, error, isValidating } = useSWR<GetFreshPostReturn>(
		`/api/crawl/getFreshPost/${pageIdx}`,
		async () => await _axios.post(`/api/crawl/getFreshPost`, { limit, offset: (pageIdx - 1) * limit }).then((res) => res.data)
	);

	const [totalCount, setTotalCount] = useState(0);
	const [freshPostList, setFreshPostList] = useState<fresh_post[]>([]);

	useEffect(() => {
		if (data?.list && data?.list?.length > 0) {
			setFreshPostList(data.list);
		}
	}, [data?.list]);

	useEffect(() => {
		if (data?.totalCount && data?.totalCount > 0 && data?.totalCount !== totalCount) {
			setTotalCount(data.totalCount);
		}
	}, [data?.totalCount, totalCount]);

	return (
		<>
			<div>
				<Head>
					<title>Seize what you want without NO LIMIT.</title>
					<meta name='description' content='Generated by create next app' />
					<link rel='icon' href='/favicon.ico' />
					<meta name='viewport' content='initial-scale=1, width=device-width' />
				</Head>

				<main>
					{isMobile && (
						<Grid.Container direction='row' justify='flex-start' gap={1}>
							<Grid>
								<InfoBar postCount={totalCount} targetSiteCount={Object.keys(names).length} />
							</Grid>
							<Grid>
								<BottomPagination limit={limit} totalCount={totalCount} page={pageIdx} onChangeHandler={pageIdxHandler} />
							</Grid>
							<Grid>
								<PostContainer posts={freshPostList} />
							</Grid>
							<Grid>
								<BottomPagination limit={limit} totalCount={totalCount} page={pageIdx} onChangeHandler={pageIdxHandler} />
							</Grid>
						</Grid.Container>
					)}
					{!isMobile && (
						<Grid.Container justify='center' direction='row' gap={1}>
							<Grid xs={1} sm={2} md={1} lg={1} xl={1}>
								left
							</Grid>
							<Grid xs={10} sm={8} md={10} lg={10} xl={10}>
								<Grid.Container justify='center' direction='row' gap={2}>
									<Grid xs={12} sm={12} md={11} lg={12} xl={12} justify='center'>
										<InfoBar postCount={totalCount} targetSiteCount={Object.keys(names).length} />
									</Grid>
									<Grid xs={12} sm={12} md={12} lg={12} xl={12} justify='center'>
										<BottomPagination
											limit={limit}
											totalCount={totalCount}
											page={pageIdx}
											onChangeHandler={pageIdxHandler}
										/>
									</Grid>
									<Grid xs={12} sm={12} md={11} lg={12} xl={12} justify='center'>
										<PostContainer posts={freshPostList} />
									</Grid>
									<Grid xs={12} sm={12} md={12} lg={12} xl={12} justify='center'>
										<BottomPagination
											limit={limit}
											totalCount={totalCount}
											page={pageIdx}
											onChangeHandler={pageIdxHandler}
										/>
									</Grid>
								</Grid.Container>
							</Grid>
							<Grid xs={1} sm={2} md={1} lg={1} xl={1}>
								right
							</Grid>
						</Grid.Container>
					)}
				</main>

				<footer>
					<Grid.Container direction='column' justify='center'>
						<Text css={{ textAlign: 'center' }}>Logan will deserve all rights.</Text>
					</Grid.Container>
				</footer>
			</div>
			{isValidating && <CustomLoading />}
		</>
	);
};
export default Home;

export async function getServerSideProps({ req, res }: GetServerSidePropsContext) {
	const userAgent = req.headers['user-agent'] || '';

	const { isMobile } = getSelectorsByUserAgent(userAgent);

	return {
		props: { isMobile },
	};
}
